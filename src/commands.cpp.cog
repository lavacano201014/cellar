// vim: filetype=cpp :
#include <iostream>
#include <string>
#include <vector>

#include "commands.hpp"
#include "internal/core.hpp"
#include "cellar.hpp"
#include "help.hpp"

using namespace std;
using namespace cellar::commands;

map<string, CommandFunction> cellar::commands::command_map;

vector<string> cellar::commands::list_commands() {
    vector<string> result;
    for (auto& item : command_map) {
        result.push_back(item.first);
    }
    return result;
}

map<string, CommandFunction> cellar::commands::core_commands() {
    map<string, CommandFunction> result;
    /*[[[cog
         import cog
         import os.path

         with open("src/commands.txt") as commandfile:
            for line in commandfile:
                linesplit = line.strip().split(" ")
                name = linesplit[0]
                func = linesplit[1]

                cog.outl("result.insert(pair<string,CommandFunction>(\"{0}\", &{1}));".format(name, func))

                if (len(linesplit) > 2):
                    desc = " ".join(linesplit[2:]) # Rest of line assumed to be description
                    cog.outl("cellar::help::set_description(\"{0}\", \"{1}\");"
                             .format(name, desc
                             .replace("\"", "\\\"")
                             .replace("\\", "\\\\")))
                             # the replace methods escape " and \ characters
                else:
                    print("-- No description is available for the {0} command.".format(name))

                if os.path.exists("src/help/" + name):
                    cog.out("cellar::help::set_details(\"{0}\", R\"(".format(name))
                    with open("src/help/" + name) as detailsfile:
                        for detail in detailsfile:
                            cog.out(detail)
                    cog.out(")\");")
                else:
                    print("-- No details are available for the {0} command.".format(name))
      ]]]*/
    //[[[end]]]
    return result;
}
